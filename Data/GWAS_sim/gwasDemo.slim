// Keywords: QTLs, quantitative trait loci, heritability, environmental variance, breeding values, additive genetic variance

initialize() {
	defineConstant("h2_p1", 0.4);     // target heritability
	defineConstant("h2_p2", 0.6);     // target heritability
	defineConstant("N",500); // subpop size
	initializeTreeSeq(); // turn on treeSeq 

	initializeMutationRate(1e-9);
	
	initializeMutationType("m1", 0.5, "f", 10.);       // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 0.05);  // QTL
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", m2, 1);
	initializeGenomicElement(g1, 0, 2e7 - 1);
	initializeRecombinationRate(1e-7);
}
1 late() {
	sim.addSubpop("p1", N);
	sim.addSubpop("p2", N);
	p1.setMigrationRates(p2, 0.001);
	p2.setMigrationRates(p1, 0.001);
}

29500 early() {
	target = c( sample(p1.genomes, 100), sample(p2.genomes, 50));
	target.addNewMutation(m2, 3.0, 10e6);
	}
1: late() {
	// sum the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	additive = inds.sumOfMutationsOfType(m2);
	
	// model environmental variance, according to the target heritability
	V_A = sd(additive)^2;

	h2_vec = c(rep(h2_p1, N), rep(h2_p2, N)); 
	V_E = (V_A - h2_vec * V_A) / h2_vec;    // from h2 == V_A / (V_A + V_E)
	env = rnorm(size(inds), 0.0, sqrt(V_E));
	// set fitness effects and remember phenotypes
	phenotypes = additive + env;
	
//	inds.fitnessScaling = 1.0 + dnorm(10.0 - phenotypes, 0.0, 5.0);
	inds.fitnessScaling = 1.0 + dnorm(c(rep(10.0,N),rep(15.0,N)) - phenotypes, 0.0, 1);
	inds.tagF = phenotypes;
}
mutationEffect(m2) {
	return 1.0;   // QTLs are neutral; fitness effects are handled below
}


30000 late() {
	if (sim.cycle == 1)
		cat("Mean phenotype:\n");
	
	meanPhenotype = mean(c(p1.individuals.tagF,p2.individuals.tagF));
	cat(format("%.2f", meanPhenotype));
	
	// Run until we reach the fitness peak
//	if (abs(meanPhenotype - 10.0) > 0.1)
//	{
//		cat(", ");
//		return;
//	}
	
	cat("\n\n-------------------------------\n");
	cat("QTLs at cycle " + sim.cycle + ":\n\n");
	
	qtls = sim.mutationsOfType(m2);
	f = sim.mutationFrequencies(NULL, qtls);
	s = qtls.selectionCoeff;
	p = qtls.position;
	o = qtls.originTick;
	indices = order(f, F);
	
	for (i in indices)
		cat("   " + p[i] + ": s = " + s[i] + ", f == " + f[i] + ", o == " + o[i] + "\n");
	

	sim.treeSeqOutput("/Users/s0784966/UBC/Teaching/FRST302/Data/GWAS_sim/twoPopModelForTeachingGWAS.X.ts");

	for (phen in c(p1.individuals.tagF,p2.individuals.tagF))
		writeFile("/Users/s0784966/UBC/Teaching/FRST302/Data/GWAS_sim/twoPopModelForTeachingGWAS.phen.txt", paste(phen), append=T);

	
	sim.simulationFinished();

}
